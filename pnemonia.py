# -*- coding: utf-8 -*-
"""pnemonia.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pC7dFzwKqWylSIsL7RGOLg-6qr0bHuRP
"""

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/

!kaggle datasets download -d paultimothymooney/chest-xray-pneumonia

import zipfile
zip_ref = zipfile.ZipFile('/content/chest-xray-pneumonia.zip', 'r')
zip_ref.extractall('/content')
zip_ref.close()

!pip install torch

!pip install torchvision pillow scikit-learn

import os

import torch

import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader,Dataset
from torchvision import transforms,models
from sklearn.metrics import accuracy_score

from PIL import Image

device =torch.device('cuda' if torch.cuda.is_available() else 'cpu')

class PneumoniaDataset(Dataset):
  def __init__(self,root_dir,transform=None):
    self.root_dir = root_dir
    self.transform = transform
    self.image_paths = []
    self.labels=[]
    for label in ['NORMAL','PNEUMONIA']:
      class_dir = os.path.join(root_dir,label)
      for img_name in os.listdir(class_dir):
        self.image_paths.append(os.path.join(class_dir,img_name))
        self.labels.append(0 if label=='NORMAL' else 1)
  def __len__(self):
    return len(self.image_paths)
  def __getitem__(self,idx):
    image_path = self.image_paths[idx]
    image = Image.open(image_path).convert('RGB')
    label = self.labels[idx]
    if self.transform:
      image = self.transform(image)
    return image,label

transform = transforms.Compose([
    transforms.Resize((224,224)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485,0.456,0.406],std=[0.229,0.224,0.225])

                                ])

train_dataset = PneumoniaDataset(root_dir='/content/chest_xray/train',transform=transform)
test_dataset = PneumoniaDataset(root_dir='/content/chest_xray/test',transform=transform)

val_dataset=PneumoniaDataset(root_dir='/content/chest_xray/val',transform=transform)

train_loader=DataLoader(train_dataset,batch_size=32,shuffle=True)
test_loader=DataLoader(test_dataset,batch_size=32,shuffle=False)
val_loader=DataLoader(val_dataset,batch_size=32,shuffle=False)

model=models.resnet18(weights=models.ResNet18_Weights.IMAGENET1K_V1)
model.fc=nn.Linear(model.fc.in_features,2)
model=model.to(device)

criterion= nn.CrossEntropyLoss()
optimizer=optim.Adam(model.parameters(),lr=0.001)

num_epochs =10
for epoch in range(num_epochs):
  model.train()
  running_loss =0.0
  for images,labels in train_loader:
    images = images.to(device)
    labels = labels.to(device)
    optimizer.zero_grad()
    output =model(images)
    loss=criterion(output,labels)
    loss.backward()
    optimizer.step()
    running_loss +=loss.item()
  print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {running_loss/len(train_loader):.4f}')
  model.eval()
  val_labels=[]
  val_preds=[]
  with torch.no_grad():
    for images,labels in val_loader:
      images = images.to(device)
      labels = labels.to(device)
      output = model(images)
      _,preds = torch.max(output,1)
      val_labels.extend(labels.cpu().numpy())
      val_preds.extend(preds.cpu().numpy())
  val_accuracy = accuracy_score(val_labels,val_preds)
  print(f'Validation Accuracy: {val_accuracy:.4f}')

model.eval()
test_labels=[]
test_preds = []
with torch.no_grad():
  for images,labels in test_loader:
    images = images.to(device)
    labels = labels.to(device)
    output = model(images)
    _,preds = torch.max(output,1)
    test_labels.extend(labels.cpu().numpy())
    test_preds.extend(preds.cpu().numpy())
test_accuracy = accuracy_score(test_labels,test_preds)
print(f'Test Accuracy: {test_accuracy:.4f}')

torch.save(model.state_dict(),'pneumonia_model.pth')